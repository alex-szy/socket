syn packet:
int ack = 0
int seq = rand(below half of max)
int length = 0
flags = syn

syn ack packet:
int ack = received syn number + 1
int seq = rand(below half of max)
int length = 0
flags = syn ack

syn ack ack packet:
int ack = received seq number + 1
int seq = syn packet seq number + 1
int length = 0
flag ack


client handshake

acked = false
init timer
create packet with syn flags
start timer 1 second
counter = rand below half of max



state is no ack or acked
state = no ack
while:
    // handshake send
    switch state:
        case no ack:
            if timer expired:
                send syn packet
                reset timer
                break
        case acked:

    
    if received packet:
        if ack packet:


goal is to get handshake working. once state reaches acked, print and exit.

on receiving a packet,

if not acked, set recvstate = seq + 1
    send ack packet

if seq counter is more than 1 greater than state, reject and send ack of most recent packet

if seq counter is less, state = seq + 1 send ack in response to this. reset state to less state

if seq counter is expected, send ack and increment seq counter

when acking packet, always send ack = seq + 1

